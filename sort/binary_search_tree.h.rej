diff a/sort/binary_search_tree.h b/sort/binary_search_tree.h	(rejected hunks)
@@ -199,6 +199,48 @@ namespace BinarySearchTree {
 			cout << node->key << " "; 
 		}
 
+		// 返回二叉树最小的节点
+		Node* _miniKey(Node* node) {
+			if (nullptr == node->left) {
+				return node;
+			}
+
+			return _miniKey(node->left);
+		}
+
+		// 返回二叉树最大的节点
+		Node* _maxKey(Node* node) {
+			if (nullptr == node->right) {
+				return node;
+			}
+
+			return _maxKey(node->right);
+		}
+
+		Node *_removeMinKey(Node *node) {
+			if (nullptr == node->left) {
+				Node *node_right = node->right;
+				delete node;
+				--count;
+				return node_right;
+			}
+
+			node->left = _removeMinKey(node->left);
+			return node;
+		}
+
+		Node *_removeMaxKey(Node *node) {
+			if (nullptr == node->right) {
+				Node *node_left = node->left;
+				delete node;
+				--count;
+				return node_left;
+			}
+
+			node->right = _removeMaxKey(node->right);
+			return node;
+		}
+
 		int count = 0;
 		Node *root = nullptr;
 
@@ -285,6 +327,28 @@ namespace BinarySearchTree {
 			node = nullptr;
 			--count;
 		}
+
+
+		Key* miniKey() {
+			if (nullptr == root) { return nullptr; }
+			Node* node = _miniKey(root);
+			return nullptr == node ? nullptr : &node->key;
+		}
+
+		Key* maxKey() {
+			if (nullptr == root) { return nullptr; }
+			Node *node = _maxKey(root);
+
+			return nullptr == node ? nullptr : &node->key;
+		}
+
+		void removeMinKey() {
+			root = _removeMinKey(root);
+		}
+
+		void removeMaxKey() {
+			root = _removeMaxKey(root);
+		}
 	};
 
 	void test_bst_search()
@@ -379,6 +443,39 @@ namespace BinarySearchTree {
 		bst.insert(4, 6);
 	}
 
+	void test_bst_min_max_key() {
+		BinarySearchTree<int, int> bst = BinarySearchTree<int, int>();
+		bst.insert(10, 1);
+		bst.insert(5, 2);
+		bst.insert(6, 3);
+		bst.insert(20, 4);
+		bst.insert(8, 5);
+		bst.insert(4, 6);
+
+		int* min_key = bst.miniKey();
+		int* max_key = bst.maxKey();
+
+		cout << "bst min key:" << *min_key << endl;
+		cout << "bst max key:" << *max_key << endl;
+	}
+
+	void test_bst_remove_min_max_key()
+	{
+		BinarySearchTree<int, int> bst = BinarySearchTree<int, int>();
+		bst.insert(10, 1);
+		bst.insert(5, 2);
+		bst.insert(6, 3);
+		bst.insert(20, 4);
+		bst.insert(8, 5);
+		bst.insert(4, 6);
+
+		bst.levelOrder();
+		cout << endl;
+		
+		bst.removeMinKey();
+		bst.removeMaxKey();
+	}
+
 }
 }
 
